{"version":3,"sources":["Components/Recipe.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","name","calories","image","ingredients","CardDeck","Card","Img","variant","src","Body","Title","Text","Math","floor","map","ingredient","text","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getAllRecipes","a","fetch","response","json","data","hits","console","log","className","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAwBeA,EArBA,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,KAAKC,EAAgC,EAAhCA,SAASC,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,YACnC,OACE,8BACJ,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACA,EAAA,EAAKC,IAAN,CAAUC,QAAQ,MAAMC,IAAKN,IAC7B,eAACG,EAAA,EAAKI,KAAN,WACE,cAACJ,EAAA,EAAKK,MAAN,UAAaV,IACb,eAACK,EAAA,EAAKM,KAAN,WACA,0CADA,IACkBC,KAAKC,MAAMZ,GAC1BE,EAAYW,KAAI,SAAAC,GAAU,OACzB,6BAAKA,EAAWC,wBC8CXC,EAxDH,WACV,IADgB,EAGcC,mBAAS,IAHvB,mBAGTC,EAHS,KAGAC,EAHA,OAIYF,mBAAS,IAJrB,mBAITG,EAJS,KAIDC,EAJC,OAKUJ,mBAAS,IALnB,mBAKTK,EALS,KAKFC,EALE,KAOhBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAa,uCAAG,8BAAAC,EAAA,sEACGC,MAAM,mCAAD,OAAoCL,EAApC,mBAXf,WAWe,oBAVd,qCASM,cACdM,EADc,gBAEDA,EAASC,OAFR,OAEdC,EAFc,OAGpBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJG,2CAAH,qDAkBnB,OACE,sBAAKG,UAAY,MAAjB,UACA,sBAAKA,UAAY,QAAjB,UACE,4CACA,gYAEF,uBAAMC,SAXS,SAAAC,GACfA,EAAEC,iBACFd,EAASH,IASiBc,UAAU,SAApC,UACA,uBAAOA,UAAU,aAAaI,KAAK,OAAOC,MAAOnB,EAAQoB,SAlBtC,SAAAJ,GACnBf,EAAUe,EAAEK,OAAOF,OAEnBhB,EAAS,OAgBT,wBAAQW,UAAU,gBAAgBI,KAAK,SAAvC,uBAIA,qBAAKJ,UAAU,cAAf,SACChB,EAAQL,KAAI,SAAA6B,GAAM,OAClB,cAAC,EAAD,CAEC3C,KAAM2C,EAAOA,OAAOC,MACpB3C,SAAU0C,EAAOA,OAAO1C,SACxBC,MAAOyC,EAAOA,OAAOzC,MACrBC,YAAawC,EAAOA,OAAOxC,aAJtBwC,EAAOA,OAAOE,aCpCVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d433f66c.chunk.js","sourcesContent":["import React from 'react'\nimport { Card, CardDeck } from 'react-bootstrap'\n\nconst Recipe = ({name,calories,image,ingredients}) => {\n  return (\n    <div>\n<CardDeck>\n  <Card>\n    <Card.Img variant=\"top\" src={image} />\n    <Card.Body>\n      <Card.Title>{name}</Card.Title>\n      <Card.Text>\n      <b>Calories:</b> {Math.floor(calories)}\n        {ingredients.map(ingredient => (\n          <li>{ingredient.text}</li>\n        ))}\n      </Card.Text>\n    </Card.Body>\n  </Card>\n  </CardDeck>\n    </div>\n  )\n}\n\nexport default Recipe;","import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport Recipe from './Components/Recipe'\n\nconst App = () => {\n  const APP_ID = \"69c4dc1f\";\n  const APP_KEY = \"b67dd3c1a53e07f1d4830b0860898f4c\";\n  const [recipes, setRecipes] = useState([])\n  const [search, setSearch] = useState('') \n  const [query, setQuery] = useState('')\n\n  useEffect(() => {\n    getAllRecipes()\n  }, [query])\n\n  const getAllRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`)\n    const data = await response.json()\n    setRecipes(data.hits)\n    console.log(data.hits)\n  }\n\n  const searchUpdate = e => {\n    setSearch(e.target.value)\n    // console.log(search)\n    setQuery('')\n  }\n\n  const getQuery = e => {\n    e.preventDefault()\n    setQuery(search)\n  }\n\n  return (\n    <div className = \"App\">\n    <div className = \"blurb\">\n      <h1>Quick Prep</h1>\n      <p>QuickPrep is an app that allows you to search through an extensive database of recipes via Edamam. Try searching by ingredient or dish, and see a list ingredients and calories. A simple way to find the recipes you're looking for, without all the added nonsense of recipe articles. Try it! Type in \"chicken\", \"eggplant\", \"Thai\" into the search bar.</p>\n    </div>\n    <form onSubmit={getQuery} className=\"search\">\n    <input className=\"search-bar\" type=\"text\" value={search} onChange={searchUpdate} />\n    <button className=\"search-button\" type=\"submit\">\n    Search\n    </button>\n    </form>\n    <div className=\"recipe-card\">\n    {recipes.map(recipe=>(\n     <Recipe\n      key={recipe.recipe.id}\n      name={recipe.recipe.label} \n      calories={recipe.recipe.calories}\n      image={recipe.recipe.image}\n      ingredients={recipe.recipe.ingredients}\n      />\n    ))}\n     </div>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}